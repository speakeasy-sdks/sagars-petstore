// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"petstore/pkg/models/shared"
)

type FindPetsByStatusSecurity struct {
	PetstoreAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// FindPetsByStatusStatusEnum - Status values that need to be considered for filter
type FindPetsByStatusStatusEnum string

const (
	FindPetsByStatusStatusEnumAvailable FindPetsByStatusStatusEnum = "available"
	FindPetsByStatusStatusEnumPending   FindPetsByStatusStatusEnum = "pending"
	FindPetsByStatusStatusEnumSold      FindPetsByStatusStatusEnum = "sold"
)

func (e FindPetsByStatusStatusEnum) ToPointer() *FindPetsByStatusStatusEnum {
	return &e
}

func (e *FindPetsByStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "pending":
		fallthrough
	case "sold":
		*e = FindPetsByStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindPetsByStatusStatusEnum: %v", v)
	}
}

type FindPetsByStatusRequest struct {
	// Status values that need to be considered for filter
	Status *FindPetsByStatusStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type FindPetsByStatusResponse struct {
	Body        []byte
	ContentType string
	// successful operation
	Pets        []shared.Pet
	StatusCode  int
	RawResponse *http.Response
}
